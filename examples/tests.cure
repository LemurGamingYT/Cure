fn temp_scope() {
    if true {
        a = new StringBuilder()
        a.add("123")
    } // a should be destroyed here
}

fn make_str() {
    b = new StringBuilder()
    b.add("keep me")
    return b
}

fn test_shadowing() {
    mut msg = "start"
    if true {
        mut msg = "inner"
        msg.set(0, "I")
        assert(msg == "Inner", "Inner scope mutation failed")
    }
    assert(msg == "start", "Outer value should remain unchanged")
}

fn loop_test() {
    mut i = 0
    while i < 3 {
        sb = new StringBuilder()
        sb.add("loop" + i.to_string())
        i = i + 1
    } // sb should be destroyed 3 times
}

fn inner() {
    x = new StringBuilder()
    x.add("deep")
    return x
}

fn nested_scope() {
    outer = inner()
    assert(outer.to_string() == "deep", "Nested scope return failed")
}

fn try_mut(int z) {
    // z = 99 // Should fail if uncommented
    return z
}

fn use_mut(mut int z) {
    z = z + 1
    return z
}

fn if_and_while_tests() {
    // Basic if
    if true {
        x = 10
        assert(x == 10, "Basic if true block failed")
    }

    if false {
        x = 5
        assert(false, "If false block should not run")
    }

    // If-else
    mut msg = ""
    if false {
        msg = "wrong"
    } else {
        msg = "correct"
    }
    assert(msg == "correct", "If-else evaluation failed")

    // Nested if
    val = 5
    if val > 0 {
        if val < 10 {
            assert(true, "Nested if block passed")
        } else {
            assert(false, "Nested if inner condition failed")
        }
    }

    // While loop counting
    mut sum = 0
    mut i = 1
    while i <= 5 {
        sum = sum + i
        i = i + 1
    }
    assert(sum == 15, "While loop sum failed") // 1+2+3+4+5 = 15

    // While loop doesn't enter
    if true {
        i = 0
        while i < 0 {
            assert(false, "This should not run")
        }
    }

    // Nested while
    mut count = 0
    mut a = 0
    while a < 2 {
        mut b = 0
        while b < 2 {
            count = count + 1
            b = b + 1
        }
        a = a + 1
    }
    assert(count == 4, "Nested while loop failed") // 2x2 = 4
}

fn main() -> int {
    // === Arrays ===
    arr = [1, 2, 3]
    assert(arr.get(0) == 1, "Array get failed")
    assert(arr.length == 3, "Array length failed")

    arr.add(4)
    assert(arr.get(3) == 4, "Array add failed")
    assert(arr.length == 4, "Array length after add failed")

    // === Strings ===
    str = "hello"
    assert(str.length == 5, "String length failed")
    assert(str.at(1) == "e", "String at failed")
    clone = str.clone()
    assert(clone == "hello", "String clone failed")

    mut s = "hello"
    s.set(1, "a")
    assert(s == "hallo", "String set failed")

    // === to_string for core types ===
    assert(123.to_string() == "123", "Int to_string failed")
    assert(3.5.to_string() == "3.5", "Float to_string failed")
    assert(true.to_string() == "true", "Bool to_string true failed")
    assert(false.to_string() == "false", "Bool to_string false failed")
    assert(nil.to_string() == "nil", "Nil to_string failed")
    assert("abc".to_string() == "abc", "String to_string failed")

    // === Math ===
    assert(Math.pi > 3.14 && Math.pi < 3.15, "Math.pi inaccurate")
    assert(Math.e > 2.71 && Math.e < 2.73, "Math.e inaccurate")

    assert(Math.pow(2, 3) == 8, "Math.pow int failed")
    assert(Math.pow(2.0, 3.0) == 8.0, "Math.pow float failed")

    assert(Math.sqrt(9) == 3, "Math.sqrt int failed")
    sqrt2 = Math.sqrt(2.0)
    assert(sqrt2 > 1.41 && sqrt2 < 1.42, "Math.sqrt float failed")

    assert(Math.abs(-5) == 5, "Math.abs int failed")
    assert(Math.abs(-3.5) == 3.5, "Math.abs float failed")

    assert(Math.min(4, 2) == 2, "Math.min failed")
    assert(Math.max(4.2, 6.8) == 6.8, "Math.max failed")

    // === String concatenation ===
    msg = "Hello, " + "World!"
    assert(msg == "Hello, World!", "String concatenation failed")

    // === StringBuilder ===
    builder = new StringBuilder()
    builder.add("Hello")
    builder.add(" World")
    assert(builder.to_string() == "Hello World", "StringBuilder failed")
    assert(builder.length == 11, "StringBuilder length failed")
    assert(builder.capacity >= builder.length, "StringBuilder capacity too small")

    // === Ref count & scope ===
    temp_scope()

    out = make_str()
    assert(out.to_string() == "keep me", "Returned object was lost or destroyed")

    test_shadowing()
    loop_test()
    nested_scope()

    // === Mutability ===
    x = 10
    // x = 11 // Uncomment to verify immutability error

    mut y = 20
    y = 25
    assert(y == 25, "Mutable assignment failed")

    assert(try_mut(100) == 100, "Immutable parameter mutation failed")
    assert(use_mut(1) == 2, "Mut parameter function failed")

    // === Type inference ===
    a = 1
    b = "abc"
    c = [true, false]
    assert(a + 1 == 2, "Int operation failed")
    assert(b + "d" == "abcd", "String concat failed")
    assert(c.length == 2, "Bool array length failed")

    // === If and While tests ===
    if_and_while_tests()

    // === End ===
    print("All tests passed.")
    return 0
}
