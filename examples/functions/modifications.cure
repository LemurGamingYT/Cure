// Add the 'Warn' modification to the 'test' function
// This is a deprecated function, so it will print a warning when compiling
[Warn("This function is deprecated, please use 'test2' instead.")]
func test() -> int {
    a = 10 + 2
    return a
}

// This is the new function that replaces 'test'
func test2() -> int {
    return 10 + 2
}

// Add the 'Benchmark' modification to the 'test_speed' function
// This will measure the execution time of the function
[Benchmark()]
func test_speed() {
    i = 0
    while i < ONE_BILLION {
        i += 1
    }
}

// Use the 'Cache' modification to the 'fib' function
// Works best when you have a recursive function or function that gets called many many times
[Benchmark()]
[Cache()]
func fib(int n) -> int {
    if n == 0 || n == 1 {
        return 1
    } else {
        return fib(n - 1) + fib(n - 2)
    }
}


// Create a transformer function to pass to the Transform() modification
// transformer functions will be given the result of the function and be expected to return the same
// as the original function type
func transformer(int result) -> int {
    return result * 2 // Multiply the original result by two
}

// Create the Transformed function, the result of this function will be multiplied by two
[Transform(transformer)]
func transformed(int x, int y) -> int {
    return x + y
}


func main() -> int {
    print(test())
    print(test2())

    // Benchmark will print out the time spent to execute the function in seconds (will not return)
    test_speed()

    // Call the 'fib' function which will cache the function call result
    // This executes in ~27.5 seconds in my testing without caching, with caching it takes 0.001 seconds
    print(fib(45))

    // Call the transformed function, the result is passed to the transformer function
    print(transformed(1, 2)) // should produce 6. (1 + 2) * 2
    return 0
}
