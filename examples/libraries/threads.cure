// 'threads' is a library that allows you to create threads, most of the library is supported but some
// is only available on Windows
use "threads"


// Create a global 'x' variable
int x = 0

// Create the mutex lock
MutexLock lock = new MutexLock()


// 'test1' is a function that takes two integers and prints their sum
func test1(int a, int b) {
    print(a + b)
}

// If you want to have a function that automatically starts a new thread when called, use the
// Thread function modification
[Thread()] // optional join parameter too (signifies if the function pauses execution) defaults to true
func test2(int x) {
    while x > 0 {
        x -= 1
    }

    print("Done decrementing")
}

// A function that causes a race condition
// This is without a mutex lock, but with one, it's fine
[Thread()]
func race_condition() {
    for _ in 0..ONE_MILLION {
        lock.lock()
        x += 1
        lock.unlock()
    }
}

func main() -> int {
    // Create a new thread that calls the 'test1' function with the arguments 1 and 2
    thread = new Thread(test1, 1, 2) // Automatically starts the thread
    print(thread) // Print the thread object
    
    // Thread.id is not supported on Windows
    if System.os == "Windows" {
        print($"Thread ID: {thread.id}") // Print the thread's ID
    } else {
        print($"Thread ID not supported on {System.os}")
    }

    // Wait for the thread to finish
    thread.join()


    /*Equivalent to:
    thread = new Thread(test2, ONE_MILLION)
    thread.join()*/
    test2(ONE_MILLION) // Call the Thread modified function

    // Call the race_condition() function twice to cause the race condition
    race_condition()
    race_condition()
    print(x)
    return 0
}
