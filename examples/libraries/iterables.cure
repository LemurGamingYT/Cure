// 'iterables' is a library of pre-made iterables such as a Stack and Linked List implementations
use "iterables"


func buffer_test() {
    // Buffers are a type of iterable that is a fixed-sized list of items
    buf = create_buffer[int](10)

    // Add 10 items to the buffer
    foreach i in range(10) {
        buf.add(i) // You will get a buffer overflow error if you add more items than the buffer size
    }

    print(buf) // Print out the buffer
    print(buf.get(0)) // Print out the first item
    print(buf.get(9)) // Print out the last item
}

func queue_test() {
    // Queue follows the FIFO (first in first out) principle
    queue = create_queue[int](20)

    // Add 1 and 2 at the start of the queue
    queue.enqueue(1)
    queue.enqueue(2)

    print(queue) // Print out the queue

    // Returns 1 because dequeuing starts from the front
    print(queue.dequeue())
}

func stack_test() {
    // Stack follows the LIFO (last in first out) principle
    stack = create_stack[int](10)

    // LIFO means that you can push and pop items on the stack
    stack.push(1)
    stack.push(2)
    stack.push(3)
    stack.push(4)
    stack.push(5)

    print(stack)

    // Removes the top item from the stack and return it
    print(stack.pop())

    print(stack)

    // You can also peek at the top of the stack which is like pop, but it doesn't remove the item
    print(stack.peek())
}

func linked_list_test() {
    // Linked Lists are many nodes connected via pointers (or references in higher level languages)
    ll = create_linked_list[int]()
    print($"Empty: {ll}")

    // Insert a bunch of elements at the end of the list
    ll.insert_end(10)
    ll.insert_end(20)
    ll.insert_end(30)
    ll.insert_end(40)
    ll.insert_end(50)

    // Current structure: 10 -> 20 -> 30 -> 40 -> 50
    print(ll)
}

func main() -> int {
    stack_test()
    linked_list_test()
    queue_test()
    buffer_test()
    return 0
}
