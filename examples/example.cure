// define a test function to add two numbers
func test_add(int a, int b) -> int { // Functions are statically-typed
    return a + b
}

// Cure also supports function overloading
// This means you can define the same function with different parameters
func test_add(float a, float b) -> float { // This time, make a float version
    return a + b
}

// If no return type is specifed, the function will return nil
func test(string x) {
    print(x)
    // Compiler inserts 'return nil'
}

// define the main function that returns an integer
// 1 means success, 0 means failure
func main() -> int {
    // program starts execution here
    // use the compile-time 'type' function
    print(type(1))
    print(type(2.505))
    print(type("Hello, world!"))
    print(type(true))
    print(type(nil))

    // define a variable
    x = 1 // Compile-time type inferencing
    int y = 2 // Optionally, you can specify the type
    print(x)
    print(y)

    // define a string variable
    s = "Hello, world!"
    print(s)

    // Call the test add function with 'x' and 'y' as the arguments
    print(test_add(x, y))

    // define an array
    arr = int{8935, 87125, 95, 841, 12378, 58, 5490, 1249, 3489, 590, 5309, 309}
    print(type(arr))
    print(arr)

    print(arr.length) // get how many elements are in the array
    print(arr.get(-1)) // get the last element

    arr.sort() // sort the array

    // use the 'to_string' function, you can 'to_string()' any type
    print("Sorted array: " + to_string(arr))

    // Combine an if branch and check if the array has the number '3894'
    if arr.has(3894) {
        print("The array has the number 3894")
    } else {
        print("The array does not have the number 3894")
    }

    // Loop over the elements of the array using a 'foreach' loop
    foreach elem in arr {
        print(elem)
    }

    arr2 = int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

    // '.add' is a function that has 3 overloads:
    arr.add(895) // add a single element at the end of the array
    arr.add(6, 28) // insert 28 at index '6'
    arr.add(arr2) // add an array

    // define a dictionary
    d = [string: int]{
        "a": 1,
        "b": 2,
        "c": 3
    }
    print(type(d))
    print(d)

    d.set("d", 4) // add a new key-value pair
    print(d.get("d")) // get the value of the key 'd'
    print(d.has("e")) // check if the key 'd' exists

    print(d.keys) // get the keys of the dictionary as an array
    print(d.values) // get the values of the dictionary as an array

    // use the 'LL' class, the low level library
    use "LL"

    // Allocate 10 bytes of memory
    ptr = allocate(10)

    // Write the integer value '5' to the allocated memory
    ptr.write(5)
    print(ptr.read(int)) // Read an 'int' type from the allocated memory

    // Make sure to free the allocated memory
    ptr.free()

    // use the 'fstream' library
    use "fstream"

    // Create a file and open it in write mode
    file = create_file("test.txt", "w")
    print(file) // Nice string representation of the file
    print(file.path) // The input path
    print(file.mode) // Get the mode that the file was opened in

    print(file.extension) // Get the file extension
    print(file.is_file) // Check if the file is a file (false if a directory)

    file.write("Hello world\n") // Write some content to the file
    read = open_file("test.txt", "r") // Since the file is created, simply open it.
    print(read.contents) // Read the contents of the file

    print(read.size) // Get the size of the file

    // Make sure to close the files
    file.close()
    read.close()

    // successfully executed the program!
    return 0
}
