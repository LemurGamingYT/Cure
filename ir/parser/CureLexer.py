# Generated from ir/Cure.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,412,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,20,3,20,239,8,20,1,20,4,20,242,8,
        20,11,20,12,20,243,1,21,3,21,247,8,21,1,21,5,21,250,8,21,10,21,12,
        21,253,9,21,1,21,1,21,4,21,257,8,21,11,21,12,21,258,1,22,3,22,262,
        8,22,1,22,1,22,5,22,266,8,22,10,22,12,22,269,9,22,1,22,1,22,1,22,
        5,22,274,8,22,10,22,12,22,277,9,22,1,22,1,22,3,22,281,8,22,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,292,8,23,1,24,1,24,
        1,24,1,24,1,25,1,25,5,25,300,8,25,10,25,12,25,303,9,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
        1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,
        1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,
        1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,381,8,57,10,57,
        12,57,384,9,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,394,
        8,58,10,58,12,58,397,9,58,1,58,1,58,1,58,1,58,1,58,1,59,4,59,405,
        8,59,11,59,12,59,406,1,59,1,59,1,60,1,60,4,267,275,382,395,0,61,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
        113,57,115,58,117,59,119,60,121,61,1,0,4,1,0,48,57,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,425,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,126,1,0,0,0,5,129,1,0,0,0,7,
        133,1,0,0,0,9,137,1,0,0,0,11,141,1,0,0,0,13,146,1,0,0,0,15,151,1,
        0,0,0,17,156,1,0,0,0,19,162,1,0,0,0,21,168,1,0,0,0,23,174,1,0,0,
        0,25,181,1,0,0,0,27,189,1,0,0,0,29,198,1,0,0,0,31,204,1,0,0,0,33,
        211,1,0,0,0,35,218,1,0,0,0,37,226,1,0,0,0,39,235,1,0,0,0,41,238,
        1,0,0,0,43,246,1,0,0,0,45,261,1,0,0,0,47,291,1,0,0,0,49,293,1,0,
        0,0,51,297,1,0,0,0,53,304,1,0,0,0,55,306,1,0,0,0,57,308,1,0,0,0,
        59,310,1,0,0,0,61,312,1,0,0,0,63,314,1,0,0,0,65,317,1,0,0,0,67,320,
        1,0,0,0,69,322,1,0,0,0,71,324,1,0,0,0,73,327,1,0,0,0,75,330,1,0,
        0,0,77,333,1,0,0,0,79,336,1,0,0,0,81,338,1,0,0,0,83,341,1,0,0,0,
        85,343,1,0,0,0,87,345,1,0,0,0,89,347,1,0,0,0,91,349,1,0,0,0,93,351,
        1,0,0,0,95,353,1,0,0,0,97,355,1,0,0,0,99,357,1,0,0,0,101,359,1,0,
        0,0,103,361,1,0,0,0,105,363,1,0,0,0,107,366,1,0,0,0,109,368,1,0,
        0,0,111,371,1,0,0,0,113,373,1,0,0,0,115,376,1,0,0,0,117,389,1,0,
        0,0,119,404,1,0,0,0,121,410,1,0,0,0,123,124,5,105,0,0,124,125,5,
        102,0,0,125,2,1,0,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,4,
        1,0,0,0,129,130,5,110,0,0,130,131,5,101,0,0,131,132,5,119,0,0,132,
        6,1,0,0,0,133,134,5,117,0,0,134,135,5,115,0,0,135,136,5,101,0,0,
        136,8,1,0,0,0,137,138,5,102,0,0,138,139,5,111,0,0,139,140,5,114,
        0,0,140,10,1,0,0,0,141,142,5,101,0,0,142,143,5,110,0,0,143,144,5,
        117,0,0,144,145,5,109,0,0,145,12,1,0,0,0,146,147,5,101,0,0,147,148,
        5,108,0,0,148,149,5,115,0,0,149,150,5,101,0,0,150,14,1,0,0,0,151,
        152,5,102,0,0,152,153,5,117,0,0,153,154,5,110,0,0,154,155,5,99,0,
        0,155,16,1,0,0,0,156,157,5,119,0,0,157,158,5,104,0,0,158,159,5,105,
        0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,18,1,0,0,0,162,163,5,
        98,0,0,163,164,5,114,0,0,164,165,5,101,0,0,165,166,5,97,0,0,166,
        167,5,107,0,0,167,20,1,0,0,0,168,169,5,99,0,0,169,170,5,111,0,0,
        170,171,5,110,0,0,171,172,5,115,0,0,172,173,5,116,0,0,173,22,1,0,
        0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,116,0,0,177,178,
        5,117,0,0,178,179,5,114,0,0,179,180,5,110,0,0,180,24,1,0,0,0,181,
        182,5,102,0,0,182,183,5,111,0,0,183,184,5,114,0,0,184,185,5,101,
        0,0,185,186,5,97,0,0,186,187,5,99,0,0,187,188,5,104,0,0,188,26,1,
        0,0,0,189,190,5,99,0,0,190,191,5,111,0,0,191,192,5,110,0,0,192,193,
        5,116,0,0,193,194,5,105,0,0,194,195,5,110,0,0,195,196,5,117,0,0,
        196,197,5,101,0,0,197,28,1,0,0,0,198,199,5,99,0,0,199,200,5,108,
        0,0,200,201,5,97,0,0,201,202,5,115,0,0,202,203,5,115,0,0,203,30,
        1,0,0,0,204,205,5,115,0,0,205,206,5,116,0,0,206,207,5,97,0,0,207,
        208,5,116,0,0,208,209,5,105,0,0,209,210,5,99,0,0,210,32,1,0,0,0,
        211,212,5,112,0,0,212,213,5,117,0,0,213,214,5,98,0,0,214,215,5,108,
        0,0,215,216,5,105,0,0,216,217,5,99,0,0,217,34,1,0,0,0,218,219,5,
        112,0,0,219,220,5,114,0,0,220,221,5,105,0,0,221,222,5,118,0,0,222,
        223,5,97,0,0,223,224,5,116,0,0,224,225,5,101,0,0,225,36,1,0,0,0,
        226,227,5,111,0,0,227,228,5,118,0,0,228,229,5,101,0,0,229,230,5,
        114,0,0,230,231,5,114,0,0,231,232,5,105,0,0,232,233,5,100,0,0,233,
        234,5,101,0,0,234,38,1,0,0,0,235,236,5,39,0,0,236,40,1,0,0,0,237,
        239,5,45,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,
        242,7,0,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,
        244,1,0,0,0,244,42,1,0,0,0,245,247,5,45,0,0,246,245,1,0,0,0,246,
        247,1,0,0,0,247,251,1,0,0,0,248,250,7,0,0,0,249,248,1,0,0,0,250,
        253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,
        251,1,0,0,0,254,256,5,46,0,0,255,257,7,0,0,0,256,255,1,0,0,0,257,
        258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,44,1,0,0,0,260,262,
        3,103,51,0,261,260,1,0,0,0,261,262,1,0,0,0,262,280,1,0,0,0,263,267,
        5,34,0,0,264,266,9,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,268,
        1,0,0,0,267,265,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,281,
        5,34,0,0,271,275,3,39,19,0,272,274,9,0,0,0,273,272,1,0,0,0,274,277,
        1,0,0,0,275,276,1,0,0,0,275,273,1,0,0,0,276,278,1,0,0,0,277,275,
        1,0,0,0,278,279,3,39,19,0,279,281,1,0,0,0,280,263,1,0,0,0,280,271,
        1,0,0,0,281,46,1,0,0,0,282,283,5,116,0,0,283,284,5,114,0,0,284,285,
        5,117,0,0,285,292,5,101,0,0,286,287,5,102,0,0,287,288,5,97,0,0,288,
        289,5,108,0,0,289,290,5,115,0,0,290,292,5,101,0,0,291,282,1,0,0,
        0,291,286,1,0,0,0,292,48,1,0,0,0,293,294,5,110,0,0,294,295,5,105,
        0,0,295,296,5,108,0,0,296,50,1,0,0,0,297,301,7,1,0,0,298,300,7,2,
        0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,
        0,0,302,52,1,0,0,0,303,301,1,0,0,0,304,305,5,43,0,0,305,54,1,0,0,
        0,306,307,5,45,0,0,307,56,1,0,0,0,308,309,5,42,0,0,309,58,1,0,0,
        0,310,311,5,47,0,0,311,60,1,0,0,0,312,313,5,37,0,0,313,62,1,0,0,
        0,314,315,5,61,0,0,315,316,5,61,0,0,316,64,1,0,0,0,317,318,5,33,
        0,0,318,319,5,61,0,0,319,66,1,0,0,0,320,321,5,62,0,0,321,68,1,0,
        0,0,322,323,5,60,0,0,323,70,1,0,0,0,324,325,5,62,0,0,325,326,5,61,
        0,0,326,72,1,0,0,0,327,328,5,60,0,0,328,329,5,61,0,0,329,74,1,0,
        0,0,330,331,5,38,0,0,331,332,5,38,0,0,332,76,1,0,0,0,333,334,5,124,
        0,0,334,335,5,124,0,0,335,78,1,0,0,0,336,337,5,33,0,0,337,80,1,0,
        0,0,338,339,5,46,0,0,339,340,5,46,0,0,340,82,1,0,0,0,341,342,5,46,
        0,0,342,84,1,0,0,0,343,344,5,44,0,0,344,86,1,0,0,0,345,346,5,58,
        0,0,346,88,1,0,0,0,347,348,5,61,0,0,348,90,1,0,0,0,349,350,5,40,
        0,0,350,92,1,0,0,0,351,352,5,41,0,0,352,94,1,0,0,0,353,354,5,123,
        0,0,354,96,1,0,0,0,355,356,5,125,0,0,356,98,1,0,0,0,357,358,5,91,
        0,0,358,100,1,0,0,0,359,360,5,93,0,0,360,102,1,0,0,0,361,362,5,36,
        0,0,362,104,1,0,0,0,363,364,5,60,0,0,364,365,5,45,0,0,365,106,1,
        0,0,0,366,367,5,63,0,0,367,108,1,0,0,0,368,369,5,45,0,0,369,370,
        5,62,0,0,370,110,1,0,0,0,371,372,5,38,0,0,372,112,1,0,0,0,373,374,
        5,61,0,0,374,375,5,62,0,0,375,114,1,0,0,0,376,377,5,47,0,0,377,378,
        5,47,0,0,378,382,1,0,0,0,379,381,9,0,0,0,380,379,1,0,0,0,381,384,
        1,0,0,0,382,383,1,0,0,0,382,380,1,0,0,0,383,385,1,0,0,0,384,382,
        1,0,0,0,385,386,5,10,0,0,386,387,1,0,0,0,387,388,6,57,0,0,388,116,
        1,0,0,0,389,390,5,47,0,0,390,391,5,42,0,0,391,395,1,0,0,0,392,394,
        9,0,0,0,393,392,1,0,0,0,394,397,1,0,0,0,395,396,1,0,0,0,395,393,
        1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,5,42,0,0,399,400,
        5,47,0,0,400,401,1,0,0,0,401,402,6,58,0,0,402,118,1,0,0,0,403,405,
        7,3,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,
        1,0,0,0,407,408,1,0,0,0,408,409,6,59,0,0,409,120,1,0,0,0,410,411,
        9,0,0,0,411,122,1,0,0,0,15,0,238,243,246,251,258,261,267,275,280,
        291,301,382,395,406,1,6,0,0
    ]

class CureLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    IN = 2
    NEW = 3
    USE = 4
    FOR = 5
    ENUM = 6
    ELSE = 7
    FUNC = 8
    WHILE = 9
    BREAK = 10
    CONST = 11
    RETURN = 12
    FOREACH = 13
    CONTINUE = 14
    CLASS = 15
    STATIC = 16
    PUBLIC = 17
    PRIVATE = 18
    OVERRIDE = 19
    APOSTROPHE = 20
    INT = 21
    FLOAT = 22
    STRING = 23
    BOOL = 24
    NIL = 25
    ID = 26
    ADD = 27
    SUB = 28
    MUL = 29
    DIV = 30
    MOD = 31
    EEQ = 32
    NEQ = 33
    GT = 34
    LT = 35
    GTE = 36
    LTE = 37
    AND = 38
    OR = 39
    NOT = 40
    DOUBLEDOT = 41
    DOT = 42
    COMMA = 43
    COLON = 44
    ASSIGN = 45
    LPAREN = 46
    RPAREN = 47
    LBRACE = 48
    RBRACE = 49
    LBRACK = 50
    RBRACK = 51
    DOLLAR = 52
    RARROW = 53
    QUESTION = 54
    RETURNS = 55
    AMPERSAND = 56
    ARROWASSIGN = 57
    COMMENT = 58
    MULTILINE_COMMENT = 59
    WHITESPACE = 60
    OTHER = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'in'", "'new'", "'use'", "'for'", "'enum'", "'else'", 
            "'func'", "'while'", "'break'", "'const'", "'return'", "'foreach'", 
            "'continue'", "'class'", "'static'", "'public'", "'private'", 
            "'override'", "'''", "'nil'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", 
            "'!'", "'..'", "'.'", "','", "':'", "'='", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "'$'", "'<-'", "'?'", "'->'", "'&'", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "IN", "NEW", "USE", "FOR", "ENUM", "ELSE", "FUNC", "WHILE", 
            "BREAK", "CONST", "RETURN", "FOREACH", "CONTINUE", "CLASS", 
            "STATIC", "PUBLIC", "PRIVATE", "OVERRIDE", "APOSTROPHE", "INT", 
            "FLOAT", "STRING", "BOOL", "NIL", "ID", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EEQ", "NEQ", "GT", "LT", "GTE", "LTE", "AND", 
            "OR", "NOT", "DOUBLEDOT", "DOT", "COMMA", "COLON", "ASSIGN", 
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "DOLLAR", "RARROW", "QUESTION", "RETURNS", "AMPERSAND", "ARROWASSIGN", 
            "COMMENT", "MULTILINE_COMMENT", "WHITESPACE", "OTHER" ]

    ruleNames = [ "IF", "IN", "NEW", "USE", "FOR", "ENUM", "ELSE", "FUNC", 
                  "WHILE", "BREAK", "CONST", "RETURN", "FOREACH", "CONTINUE", 
                  "CLASS", "STATIC", "PUBLIC", "PRIVATE", "OVERRIDE", "APOSTROPHE", 
                  "INT", "FLOAT", "STRING", "BOOL", "NIL", "ID", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "EEQ", "NEQ", "GT", "LT", 
                  "GTE", "LTE", "AND", "OR", "NOT", "DOUBLEDOT", "DOT", 
                  "COMMA", "COLON", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACK", "RBRACK", "DOLLAR", "RARROW", "QUESTION", 
                  "RETURNS", "AMPERSAND", "ARROWASSIGN", "COMMENT", "MULTILINE_COMMENT", 
                  "WHITESPACE", "OTHER" ]

    grammarFileName = "Cure.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


