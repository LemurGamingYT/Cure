# Generated from ir/Cure.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,341,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,3,14,178,8,
        14,1,14,4,14,181,8,14,11,14,12,14,182,1,15,3,15,186,8,15,1,15,5,
        15,189,8,15,10,15,12,15,192,9,15,1,15,1,15,4,15,196,8,15,11,15,12,
        15,197,1,16,3,16,201,8,16,1,16,1,16,5,16,205,8,16,10,16,12,16,208,
        9,16,1,16,1,16,1,16,5,16,213,8,16,10,16,12,16,216,9,16,1,16,1,16,
        3,16,220,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        231,8,17,1,18,1,18,1,18,1,18,1,19,1,19,5,19,239,8,19,10,19,12,19,
        242,9,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,5,48,312,8,48,10,48,12,48,315,9,48,1,48,
        1,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,325,8,49,10,49,12,49,328,
        9,49,1,49,1,49,1,49,1,49,1,49,1,50,4,50,336,8,50,11,50,12,50,337,
        1,50,1,50,4,206,214,313,326,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,354,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,106,1,0,0,
        0,5,109,1,0,0,0,7,113,1,0,0,0,9,117,1,0,0,0,11,122,1,0,0,0,13,127,
        1,0,0,0,15,132,1,0,0,0,17,138,1,0,0,0,19,144,1,0,0,0,21,150,1,0,
        0,0,23,157,1,0,0,0,25,165,1,0,0,0,27,174,1,0,0,0,29,177,1,0,0,0,
        31,185,1,0,0,0,33,219,1,0,0,0,35,230,1,0,0,0,37,232,1,0,0,0,39,236,
        1,0,0,0,41,243,1,0,0,0,43,245,1,0,0,0,45,247,1,0,0,0,47,249,1,0,
        0,0,49,251,1,0,0,0,51,253,1,0,0,0,53,256,1,0,0,0,55,259,1,0,0,0,
        57,261,1,0,0,0,59,263,1,0,0,0,61,266,1,0,0,0,63,269,1,0,0,0,65,272,
        1,0,0,0,67,275,1,0,0,0,69,277,1,0,0,0,71,279,1,0,0,0,73,281,1,0,
        0,0,75,283,1,0,0,0,77,285,1,0,0,0,79,287,1,0,0,0,81,289,1,0,0,0,
        83,291,1,0,0,0,85,293,1,0,0,0,87,295,1,0,0,0,89,297,1,0,0,0,91,299,
        1,0,0,0,93,302,1,0,0,0,95,304,1,0,0,0,97,307,1,0,0,0,99,320,1,0,
        0,0,101,335,1,0,0,0,103,104,5,105,0,0,104,105,5,102,0,0,105,2,1,
        0,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,4,1,0,0,0,109,110,
        5,110,0,0,110,111,5,101,0,0,111,112,5,119,0,0,112,6,1,0,0,0,113,
        114,5,117,0,0,114,115,5,115,0,0,115,116,5,101,0,0,116,8,1,0,0,0,
        117,118,5,101,0,0,118,119,5,110,0,0,119,120,5,117,0,0,120,121,5,
        109,0,0,121,10,1,0,0,0,122,123,5,101,0,0,123,124,5,108,0,0,124,125,
        5,115,0,0,125,126,5,101,0,0,126,12,1,0,0,0,127,128,5,102,0,0,128,
        129,5,117,0,0,129,130,5,110,0,0,130,131,5,99,0,0,131,14,1,0,0,0,
        132,133,5,119,0,0,133,134,5,104,0,0,134,135,5,105,0,0,135,136,5,
        108,0,0,136,137,5,101,0,0,137,16,1,0,0,0,138,139,5,98,0,0,139,140,
        5,114,0,0,140,141,5,101,0,0,141,142,5,97,0,0,142,143,5,107,0,0,143,
        18,1,0,0,0,144,145,5,99,0,0,145,146,5,111,0,0,146,147,5,110,0,0,
        147,148,5,115,0,0,148,149,5,116,0,0,149,20,1,0,0,0,150,151,5,114,
        0,0,151,152,5,101,0,0,152,153,5,116,0,0,153,154,5,117,0,0,154,155,
        5,114,0,0,155,156,5,110,0,0,156,22,1,0,0,0,157,158,5,102,0,0,158,
        159,5,111,0,0,159,160,5,114,0,0,160,161,5,101,0,0,161,162,5,97,0,
        0,162,163,5,99,0,0,163,164,5,104,0,0,164,24,1,0,0,0,165,166,5,99,
        0,0,166,167,5,111,0,0,167,168,5,110,0,0,168,169,5,116,0,0,169,170,
        5,105,0,0,170,171,5,110,0,0,171,172,5,117,0,0,172,173,5,101,0,0,
        173,26,1,0,0,0,174,175,5,39,0,0,175,28,1,0,0,0,176,178,5,45,0,0,
        177,176,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,181,7,0,0,0,
        180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,
        183,30,1,0,0,0,184,186,5,45,0,0,185,184,1,0,0,0,185,186,1,0,0,0,
        186,190,1,0,0,0,187,189,7,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,
        190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,
        193,195,5,46,0,0,194,196,7,0,0,0,195,194,1,0,0,0,196,197,1,0,0,0,
        197,195,1,0,0,0,197,198,1,0,0,0,198,32,1,0,0,0,199,201,3,89,44,0,
        200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,206,5,34,0,0,
        203,205,9,0,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,207,1,0,0,0,
        206,204,1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,220,5,34,0,0,
        210,214,3,27,13,0,211,213,9,0,0,0,212,211,1,0,0,0,213,216,1,0,0,
        0,214,215,1,0,0,0,214,212,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,
        0,217,218,3,27,13,0,218,220,1,0,0,0,219,200,1,0,0,0,219,210,1,0,
        0,0,220,34,1,0,0,0,221,222,5,116,0,0,222,223,5,114,0,0,223,224,5,
        117,0,0,224,231,5,101,0,0,225,226,5,102,0,0,226,227,5,97,0,0,227,
        228,5,108,0,0,228,229,5,115,0,0,229,231,5,101,0,0,230,221,1,0,0,
        0,230,225,1,0,0,0,231,36,1,0,0,0,232,233,5,110,0,0,233,234,5,105,
        0,0,234,235,5,108,0,0,235,38,1,0,0,0,236,240,7,1,0,0,237,239,7,2,
        0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,
        0,0,241,40,1,0,0,0,242,240,1,0,0,0,243,244,5,43,0,0,244,42,1,0,0,
        0,245,246,5,45,0,0,246,44,1,0,0,0,247,248,5,42,0,0,248,46,1,0,0,
        0,249,250,5,47,0,0,250,48,1,0,0,0,251,252,5,37,0,0,252,50,1,0,0,
        0,253,254,5,61,0,0,254,255,5,61,0,0,255,52,1,0,0,0,256,257,5,33,
        0,0,257,258,5,61,0,0,258,54,1,0,0,0,259,260,5,62,0,0,260,56,1,0,
        0,0,261,262,5,60,0,0,262,58,1,0,0,0,263,264,5,62,0,0,264,265,5,61,
        0,0,265,60,1,0,0,0,266,267,5,60,0,0,267,268,5,61,0,0,268,62,1,0,
        0,0,269,270,5,38,0,0,270,271,5,38,0,0,271,64,1,0,0,0,272,273,5,124,
        0,0,273,274,5,124,0,0,274,66,1,0,0,0,275,276,5,33,0,0,276,68,1,0,
        0,0,277,278,5,46,0,0,278,70,1,0,0,0,279,280,5,44,0,0,280,72,1,0,
        0,0,281,282,5,58,0,0,282,74,1,0,0,0,283,284,5,61,0,0,284,76,1,0,
        0,0,285,286,5,40,0,0,286,78,1,0,0,0,287,288,5,41,0,0,288,80,1,0,
        0,0,289,290,5,123,0,0,290,82,1,0,0,0,291,292,5,125,0,0,292,84,1,
        0,0,0,293,294,5,91,0,0,294,86,1,0,0,0,295,296,5,93,0,0,296,88,1,
        0,0,0,297,298,5,36,0,0,298,90,1,0,0,0,299,300,5,45,0,0,300,301,5,
        62,0,0,301,92,1,0,0,0,302,303,5,38,0,0,303,94,1,0,0,0,304,305,5,
        61,0,0,305,306,5,62,0,0,306,96,1,0,0,0,307,308,5,47,0,0,308,309,
        5,47,0,0,309,313,1,0,0,0,310,312,9,0,0,0,311,310,1,0,0,0,312,315,
        1,0,0,0,313,314,1,0,0,0,313,311,1,0,0,0,314,316,1,0,0,0,315,313,
        1,0,0,0,316,317,5,10,0,0,317,318,1,0,0,0,318,319,6,48,0,0,319,98,
        1,0,0,0,320,321,5,47,0,0,321,322,5,42,0,0,322,326,1,0,0,0,323,325,
        9,0,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,327,1,0,0,0,326,324,
        1,0,0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,330,5,42,0,0,330,331,
        5,47,0,0,331,332,1,0,0,0,332,333,6,49,0,0,333,100,1,0,0,0,334,336,
        7,3,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,
        1,0,0,0,338,339,1,0,0,0,339,340,6,50,0,0,340,102,1,0,0,0,15,0,177,
        182,185,190,197,200,206,214,219,230,240,313,326,337,1,6,0,0
    ]

class CureLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    IN = 2
    NEW = 3
    USE = 4
    ENUM = 5
    ELSE = 6
    FUNC = 7
    WHILE = 8
    BREAK = 9
    CONST = 10
    RETURN = 11
    FOREACH = 12
    CONTINUE = 13
    APOSTROPHE = 14
    INT = 15
    FLOAT = 16
    STRING = 17
    BOOL = 18
    NIL = 19
    ID = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EEQ = 26
    NEQ = 27
    GT = 28
    LT = 29
    GTE = 30
    LTE = 31
    AND = 32
    OR = 33
    NOT = 34
    DOT = 35
    COMMA = 36
    COLON = 37
    ASSIGN = 38
    LPAREN = 39
    RPAREN = 40
    LBRACE = 41
    RBRACE = 42
    LBRACK = 43
    RBRACK = 44
    DOLLAR = 45
    RETURNS = 46
    AMPERSAND = 47
    ARROWASSIGN = 48
    COMMENT = 49
    MULTILINE_COMMENT = 50
    WHITESPACE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'in'", "'new'", "'use'", "'enum'", "'else'", "'func'", 
            "'while'", "'break'", "'const'", "'return'", "'foreach'", "'continue'", 
            "'''", "'nil'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
            "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'", "'.'", 
            "','", "':'", "'='", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "'$'", "'->'", "'&'", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "IN", "NEW", "USE", "ENUM", "ELSE", "FUNC", "WHILE", "BREAK", 
            "CONST", "RETURN", "FOREACH", "CONTINUE", "APOSTROPHE", "INT", 
            "FLOAT", "STRING", "BOOL", "NIL", "ID", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EEQ", "NEQ", "GT", "LT", "GTE", "LTE", "AND", 
            "OR", "NOT", "DOT", "COMMA", "COLON", "ASSIGN", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACK", "RBRACK", "DOLLAR", "RETURNS", 
            "AMPERSAND", "ARROWASSIGN", "COMMENT", "MULTILINE_COMMENT", 
            "WHITESPACE" ]

    ruleNames = [ "IF", "IN", "NEW", "USE", "ENUM", "ELSE", "FUNC", "WHILE", 
                  "BREAK", "CONST", "RETURN", "FOREACH", "CONTINUE", "APOSTROPHE", 
                  "INT", "FLOAT", "STRING", "BOOL", "NIL", "ID", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "EEQ", "NEQ", "GT", "LT", 
                  "GTE", "LTE", "AND", "OR", "NOT", "DOT", "COMMA", "COLON", 
                  "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                  "RBRACK", "DOLLAR", "RETURNS", "AMPERSAND", "ARROWASSIGN", 
                  "COMMENT", "MULTILINE_COMMENT", "WHITESPACE" ]

    grammarFileName = "Cure.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


